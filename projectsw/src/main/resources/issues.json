[
  {
    "title": "Initialize Spring Boot Project",
    "body": "Create a Spring Boot project using Maven.\n- Structure src/main/java and src/main/resources directories.\n- Add initial dependencies: Spring Web, Spring Data JPA, Lombok.\n- Configure a complete .gitignore (Java + Spring Boot + IntelliJ + Zone.Identifier)."
  },
  {
    "title": "Configure application.properties",
    "body": "Set basic application settings.\n- Configure default port, application name, and initial logging."
  },
  {
    "title": "Create main class ProjectswApplication",
    "body": "Create a @SpringBootApplication class.\n- Test that the application starts correctly."
  },
  {
    "title": "Create Character entity",
    "body": "Attributes: id, name, species, home planet.\n- Use JPA annotations.\n- Generate CharacterRepository."
  },
  {
    "title": "Create Mission entity",
    "body": "Attributes: id, title, description, status (Enum: PENDING, IN_PROGRESS, COMPLETED), creation date.\n- ManyToOne relationship with Character.\n- Create MissionRepository."
  },
  {
    "title": "Configure H2/PostgreSQL database",
    "body": "Configure connection via application.properties.\n- Create initial table scripts if needed."
  },
  {
    "title": "Create DTOs for Character and Mission",
    "body": "Create Request and Response DTOs.\n- Validate required fields using annotations (@NotNull, @Size, etc.)."
  },
  {
    "title": "Create CharacterService and MissionService",
    "body": "CRUD methods: create, read, update, delete.\n- Business logic: e.g., prevent duplicate missions for the same character."
  },
  {
    "title": "Create CharacterController",
    "body": "Endpoints: /characters (GET, POST, PUT, DELETE).\n- Test with Postman or Insomnia."
  },
  {
    "title": "Create MissionController",
    "body": "Endpoints: /missions (GET, POST, PUT, DELETE).\n- Filter by status and character."
  },
  {
    "title": "Implement advanced relationships",
    "body": "OneToMany relationship between Character and Mission.\n- Test lazy/eager loading as needed."
  },
  {
    "title": "Implement validations and custom exceptions",
    "body": "Create GlobalExceptionHandler.\n- Return clear messages for validation errors."
  },
  {
    "title": "Implement basic authentication / JWT (optional)",
    "body": "Internal users (administrators) and external users (players).\n- Protect critical endpoints."
  },
  {
    "title": "Create unit and integration tests",
    "body": "Test services and controllers using JUnit + MockMvc.\n- Minimum coverage recommended: 80%."
  }
]
